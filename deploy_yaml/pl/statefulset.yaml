apiVersion: v1
items:
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      vizier-name: pixie
    generation: 1
    labels:
      app: pl-monitoring
      etcd_cluster: pl-etcd
      vizier-name: pixie
    name: pl-etcd
    namespace: pl
  spec:
    podManagementPolicy: Parallel
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: pl-monitoring
        etcd_cluster: pl-etcd
    serviceName: pl-etcd
    template:
      metadata:
        annotations:
          vizier-name: pixie
        creationTimestamp: null
        labels:
          app: pl-monitoring
          etcd_cluster: pl-etcd
          plane: control
          vizier-name: pixie
        name: pl-etcd
      spec:
        containers:
        - command:
          - /bin/sh
          - -ec
          - |
            HOSTNAME=$(hostname)

            eps() {
              EPS=""
              for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                EPS="${EPS}${EPS:+,}https://${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2379"
              done
              echo ${EPS}
            }

            member_hash() {
              etcdctl \
                  --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                  --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                  --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                  --endpoints=$(eps) \
                  member list | grep https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380 | cut -d',' -f1
            }

            num_existing() {
              etcdctl \
                  --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                  --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                  --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                  --endpoints=$(eps) \
                  member list | wc -l
            }

            initial_peers() {
              PEERS=""
              for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                PEERS="${PEERS}${PEERS:+,}${CLUSTER_NAME}-${i}=https://${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380"
              done
              echo ${PEERS}
            }

            MEMBER_HASH=$(member_hash)
            EXISTING=$(num_existing)

            # Re-joining after failure?
            if [ -n "${MEMBER_HASH}" ]; then
              echo "Re-joining member ${HOSTNAME}"

              etcdctl \
                  --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                  --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                  --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                  --endpoints=$(eps) \
                  member remove ${MEMBER_HASH}

              rm -rf /var/run/etcd/*
              mkdir -p /var/run/etcd/
            fi

            if [ ${EXISTING} -gt 0 ]; then
              while true; do
                echo "Waiting for ${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE} to come up"
                ping -W 1 -c 1 ${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE} > /dev/null && break
                sleep 1s
              done

              etcdctl \
                  --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                  --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                  --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                  --endpoints=$(eps) \
                  member add ${HOSTNAME} --peer-urls=https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380 | grep "^ETCD_" > /var/run/etcd/new_member_envs

              if [ $? -ne 0 ]; then
                echo "Member add ${HOSTNAME} error"
                rm -f /var/run/etcd/new_member_envs
                exit 1
              fi

              cat /var/run/etcd/new_member_envs
              . /var/run/etcd/new_member_envs

              exec etcd --name ${HOSTNAME} \
                  --initial-advertise-peer-urls https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380 \
                  --listen-peer-urls https://0.0.0.0:2380 \
                  --listen-client-urls https://0.0.0.0:2379 \
                  --advertise-client-urls https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2379 \
                  --data-dir /var/run/etcd/default.etcd \
                  --initial-cluster ${ETCD_INITIAL_CLUSTER} \
                  --initial-cluster-state ${ETCD_INITIAL_CLUSTER_STATE} \
                  --peer-client-cert-auth=true \
                  --peer-trusted-ca-file=/etc/etcdtls/member/peer-tls/peer-ca.crt \
                  --peer-cert-file=/etc/etcdtls/member/peer-tls/peer.crt \
                  --peer-key-file=/etc/etcdtls/member/peer-tls/peer.key \
                  --client-cert-auth=true \
                  --trusted-ca-file=/etc/etcdtls/member/server-tls/server-ca.crt \
                  --cert-file=/etc/etcdtls/member/server-tls/server.crt \
                  --key-file=/etc/etcdtls/member/server-tls/server.key
                  --max-request-bytes 2000000 \
                  --max-wals 1 \
                  --max-snapshots 1 \
                  --quota-backend-bytes 8589934592 \
                  --snapshot-count 5000
            fi

            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
              while true; do
                echo "Waiting for ${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.${POD_NAMESPACE} to come up"
                ping -W 1 -c 1 ${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.${POD_NAMESPACE} > /dev/null && break
                sleep 1s
              done
            done

            echo "Joining member ${HOSTNAME}"
            exec etcd --name ${HOSTNAME} \
                --initial-advertise-peer-urls https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380 \
                --listen-peer-urls https://0.0.0.0:2380 \
                --listen-client-urls https://0.0.0.0:2379 \
                --advertise-client-urls https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2379 \
                --initial-cluster-token pl-etcd-cluster-1 \
                --data-dir /var/run/etcd/default.etcd \
                --initial-cluster $(initial_peers) \
                --initial-cluster-state new \
                --peer-client-cert-auth=true \
                --peer-trusted-ca-file=/etc/etcdtls/member/peer-tls/peer-ca.crt \
                --peer-cert-file=/etc/etcdtls/member/peer-tls/peer.crt \
                --peer-key-file=/etc/etcdtls/member/peer-tls/peer.key \
                --client-cert-auth=true \
                --trusted-ca-file=/etc/etcdtls/member/server-tls/server-ca.crt \
                --cert-file=/etc/etcdtls/member/server-tls/server.crt \
                --key-file=/etc/etcdtls/member/server-tls/server.key
                --max-request-bytes 2000000 \
                --max-wals 1 \
                --max-snapshots 1 \
                --quota-backend-bytes 8589934592 \
                --snapshot-count 5000
          env:
          - name: INITIAL_CLUSTER_SIZE
            value: "3"
          - name: CLUSTER_NAME
            value: pl-etcd
          - name: ETCDCTL_API
            value: "3"
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: ETCD_AUTO_COMPACTION_RETENTION
            value: "5"
          - name: ETCD_AUTO_COMPACTION_MODE
            value: revision
          image: quay.io/coreos/etcd:v3.4.3
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -ec
                - |
                  HOSTNAME=$(hostname)

                  member_hash() {
                    etcdctl \
                        --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                        --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                        --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                        --endpoints=$(eps) \
                        member list | grep https://${HOSTNAME}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2380 | cut -d',' -f1
                  }

                  eps() {
                    EPS=""
                    for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                      EPS="${EPS}${EPS:+,}https://${CLUSTER_NAME}-${i}.${CLUSTER_NAME}.${POD_NAMESPACE}.svc:2379"
                    done
                    echo ${EPS}
                  }

                  MEMBER_HASH=$(member_hash)

                  # Removing member from cluster
                  if [ -n "${MEMBER_HASH}" ]; then
                    echo "Removing ${HOSTNAME} from etcd cluster"
                    etcdctl \
                        --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt \
                        --key=/etc/etcdtls/client/etcd-tls/etcd-client.key \
                        --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt \
                        --endpoints=$(eps) \
                        member remove $(member_hash)
                    if [ $? -eq 0 ]; then
                      # Remove everything otherwise the cluster will no longer scale-up
                      rm -rf /var/run/etcd/*
                    fi
                  fi
          name: etcd
          ports:
          - containerPort: 2379
            name: client
            protocol: TCP
          - containerPort: 2380
            name: server
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -ec
              - etcdctl --endpoints=https://localhost:2379 --cert=/etc/etcdtls/client/etcd-tls/etcd-client.crt
                --key=/etc/etcdtls/client/etcd-tls/etcd-client.key --cacert=/etc/etcdtls/client/etcd-tls/etcd-client-ca.crt
                endpoint status
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/etcd
            name: etcd-data
          - mountPath: /etc/etcdtls/member/peer-tls
            name: member-peer-tls
          - mountPath: /etc/etcdtls/member/server-tls
            name: member-server-tls
          - mountPath: /etc/etcdtls/client/etcd-tls
            name: etcd-client-tls
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: member-peer-tls
          secret:
            defaultMode: 420
            secretName: etcd-peer-tls-certs
        - name: member-server-tls
          secret:
            defaultMode: 420
            secretName: etcd-server-tls-certs
        - name: etcd-client-tls
          secret:
            defaultMode: 420
            secretName: etcd-client-tls-certs
        - emptyDir: {}
          name: etcd-data
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    collisionCount: 0
    currentReplicas: 3
    currentRevision: pl-etcd-777dbbd499
    observedGeneration: 1
    readyReplicas: 1
    replicas: 3
    updateRevision: pl-etcd-777dbbd499
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      vizier-name: pixie
    creationTimestamp: "2022-07-25T02:42:28Z"
    generation: 2
    labels:
      app: pl-monitoring
      name: pl-nats
      vizier-name: pixie
    name: pl-nats
    namespace: pl
    resourceVersion: "299124"
    uid: e48b0f51-06b8-4eef-89bc-feb57a052ed9
  spec:
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: pl-monitoring
        name: pl-nats
    serviceName: pl-nats
    template:
      metadata:
        annotations:
          vizier-name: pixie
        creationTimestamp: null
        labels:
          app: pl-monitoring
          name: pl-nats
          plane: control
          vizier-name: pixie
      spec:
        containers:
        - command:
          - nats-server
          - --config
          - /etc/nats-config/nats.conf
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CLUSTER_ADVERTISE
            value: $(POD_NAME).pl-nats.$(POD_NAMESPACE).svc
          image: wuchengyi/pixie-oss.pixie-prod.vizier-deps.nats:2.8.4-alpine3.15
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - /nats-server -sl=ldm=/var/run/nats/nats.pid && /bin/sleep 60
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8222
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: pl-nats
          ports:
          - containerPort: 4222
            name: client
            protocol: TCP
          - containerPort: 7422
            name: leafnodes
            protocol: TCP
          - containerPort: 6222
            name: cluster
            protocol: TCP
          - containerPort: 8222
            name: monitor
            protocol: TCP
          - containerPort: 7777
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8222
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/nats-config
            name: config-volume
          - mountPath: /etc/nats-server-tls-certs
            name: nats-server-tls-volume
          - mountPath: /var/run/nats
            name: pid
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 60
        volumes:
        - name: nats-server-tls-volume
          secret:
            defaultMode: 420
            secretName: service-tls-certs
        - configMap:
            defaultMode: 420
            name: nats-config
          name: config-volume
        - emptyDir: {}
          name: pid
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: pl-nats-dfd7d89c4
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updateRevision: pl-nats-dfd7d89c4
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
